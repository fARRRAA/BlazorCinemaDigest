@page "/movie/{movieId:int}/chat/{chatId:int}"
@rendermode InteractiveServer
@using BlazorCinemaDigest.ApiRequest
@using BlazorCinemaDigest.ApiRequest.Model
@using BlazorCinemaDigest.ApiRequest.Services
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.SignalR.Client
@using static BlazorCinemaDigest.ApiRequest.Services.UserService
@inject NavigationManager Navigation
@inject UserService UserService
@inject ChatApiService ChatApiService
@inject MovieApiService MovieApiService
@inject UserApiService UserApiService
@inject IJSRuntime JSRuntime
@inject ChatMessageApiService MessagesApiService
@code {
	[Parameter] public int movieId { get; set; }
	[Parameter] public int chatId { get; set; }
	private bool isEditMessageModalVisible = false;


	private MovieChat movieChat;
	private Movie movie;
	private User user;
	private string newMessage = string.Empty;
	HubConnection hubConnection;
	// private List<MovieChatMessage> messages = new();
	private List<MovieChatMessage> messages;
	private IBrowserFile selectedFile;
	private HttpClient _httpClient;
	private MovieChatMessageRequest messageToEdit = new MovieChatMessageRequest();
	private MovieChatMessage msgCurrent = new MovieChatMessage();
	private void OpenEditMovieModal(MovieChatMessage msg)
	{
		isEditMessageModalVisible = true;
		msgCurrent = msg;
		StateHasChanged();

	}
	private void CloseModal()
	{
		isEditMessageModalVisible = false;
		StateHasChanged();
	}
	protected override async Task OnInitializedAsync()
	{
		_httpClient = new HttpClient();

		hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:7253/chatHub").Build();
		hubConnection.On<User, MovieChatMessage>("ReceiveMessage", async (user, message) =>
		{
			await UpdateMessages();
			StateHasChanged();
			await InvokeAsync(StateHasChanged);
		});
		await hubConnection.StartAsync();
	}
	public async Task UpdateMessages()
	{
		var msgs = await MessagesApiService.GetMovieChatMessages(chatId);
		messages = msgs;
		await InvokeAsync(StateHasChanged);
	}
	protected override async Task OnParametersSetAsync()
	{
		if (!UserService.IsAuthenticated)
		{
			Navigation.NavigateTo("/");
		}
		var chat = await ChatApiService.GetMovieChatById(chatId);
		movieChat = chat;
		var movieResponce = await MovieApiService.GetMovieById(movieId);
		movie = movieResponce;
		var userResponce = await UserApiService.GetUserByIdAsync(UserService.CurrentUser.userId);
		user = userResponce;
		await UpdateMessages();
	}
	private async Task SendMessage()
	{
		if (string.IsNullOrEmpty(newMessage))
		{
			return;
		}



		var message = new MovieChatMessageRequest()
			{
				chatId = chatId,
				userId = user.id,
				sent_at = DateTime.Now,
				photoUrl = string.Empty,
				message = newMessage,
				User = user,
				Chat = movieChat
			};
		message.Chat.Movie = movie;
		if (selectedFile != null)
		{
			var content = new MultipartFormDataContent();

			var fileStream = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 2 * 20024 * 20024));
			fileStream.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
			content.Add(fileStream, "file", selectedFile.Name);
			var requestUrl = "https://localhost:7270/api/Photos/upload";
			var requestMessage = new HttpRequestMessage(HttpMethod.Post, $"{requestUrl}")
				{
					Content = content
				};
			var token = UserService.CurrentUser.token;
			requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
			var response = await _httpClient.SendAsync(requestMessage);

			if (response.IsSuccessStatusCode)
			{
				try
				{
					var photo = await response.Content.ReadFromJsonAsync<MoviePhoto>();
					message.photoUrl = photo.Url;
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Ошибка десериализации: {ex.Message}");
				}
			}

		}
		if (hubConnection.State == HubConnectionState.Connected)
		{
			await hubConnection.SendAsync("SendMessage", user, message);
			await MessagesApiService.CreateMovieChatMessage(message);
			newMessage = string.Empty;

		}
	}
	private async Task ScrollToBottom()
	{
		await Task.Delay(50);
		await JSRuntime.InvokeVoidAsync("scrollBottom");
	}

	private async Task HandleFileSelected(InputFileChangeEventArgs e)
	{
		selectedFile = e.GetMultipleFiles(1).FirstOrDefault();
	}
	private async void EditMessage()
	{
		if (string.IsNullOrEmpty(messageToEdit.message))
		{
			return;
		}
		messageToEdit.Chat = msgCurrent.Chat;
		messageToEdit.photoUrl = msgCurrent.photoUrl;
		messageToEdit.User = msgCurrent.User;
		messageToEdit.sent_at = msgCurrent.sent_at;
		messageToEdit.userId = msgCurrent.userId;
		messageToEdit.chatId = msgCurrent.chatId;
		messageToEdit.Chat.Movie = msgCurrent.Chat.Movie;
		messageToEdit.Chat.Movie.Genre = movie.Genre;

		await MessagesApiService.EditMovieMessage(msgCurrent.id, messageToEdit);
		await UpdateMessages();
		StateHasChanged();
		messageToEdit.message = string.Empty;

		CloseModal();
	}
	private async Task DeleteMovieMessage(int id)
	{

		// bool confirmed = await JSRuntime.InvokeAsync<bool>("showConfirmationDialog", "Вы уверены, что хотите удалить это сообщение?");

		// if (confirmed)
		// {
			await MessagesApiService.DeleteMovieMessage(id);
			await UpdateMessages();
			StateHasChanged();
		// }

	}
}
<div class="chat-container">
	@if (@movie != null)
	{
		<div class="chat-header">
			<h2>Обсуждение фильма @movie.name</h2>
		</div>
	}
	<div class="chat-messages" id="chat-messages">
		@if (messages != null)
		{
			@if (messages.Count > 0)
			{
				@foreach (var message in messages)
				{
					<div class="message @(message.userId==user.id ? "my-message" : "other-message")">
						<div class="message-header">
							<NavLink href=@($"/userChat/from/{user.id}/to/{message.userId}")>
								<img src="/imgs/emptyimg.png" alt="Avatar" class="avatar" />
								<span style="@(message.userId==user.id ? "color:white;" : "color:#333333")" class="sender-name">@message.User.name</span>
							</NavLink>
						</div>
						<div class="message-content">
							@if (!string.IsNullOrEmpty(message.photoUrl))
							{
								<img src="@message.photoUrl" class="content_image" />
							}
							@message.message
						</div>
						<div class="message-footer">
							<span class="timestamp">@message.sent_at.ToString("dd.MM.yyyy HH:mm")</span>
							@if (UserService.CurrentUser.role == "admin")
							{
								<div class="admin_btns">
									<button @onclick="()=>OpenEditMovieModal(message)" style="background:none;">
										<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
											<path d="M12 3H5C4.46957 3 3.96086 3.21071 3.58579 3.58579C3.21071 3.96086 3 4.46957 3 5V19C3 19.5304 3.21071 20.0391 3.58579 20.4142C3.96086 20.7893 4.46957 21 5 21H19C19.5304 21 20.0391 20.7893 20.4142 20.4142C20.7893 20.0391 21 19.5304 21 19V12" stroke="red" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
											<path d="M18.375 2.625C18.7728 2.22717 19.3124 2.00368 19.875 2.00368C20.4376 2.00368 20.9771 2.22717 21.375 2.625C21.7728 3.02282 21.9963 3.56239 21.9963 4.125C21.9963 4.68761 21.7728 5.22717 21.375 5.625L12.362 14.639C12.1245 14.8762 11.8312 15.0499 11.509 15.144L8.63597 15.984C8.54992 16.0091 8.45871 16.0106 8.37188 15.9884C8.28505 15.9661 8.2058 15.9209 8.14242 15.8576C8.07904 15.7942 8.03386 15.7149 8.01162 15.6281C7.98937 15.5413 7.99087 15.45 8.01597 15.364L8.85597 12.491C8.9505 12.169 9.12451 11.8761 9.36197 11.639L18.375 2.625Z" stroke="red" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
										</svg>
									</button>
									<button style="background:none;" @onclick="async()=> await DeleteMovieMessage(message.id)">
										<svg width="26" height="26" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
											<path d="M7 21C6.45 21 5.97933 20.8043 5.588 20.413C5.19667 20.0217 5.00067 19.5507 5 19V6H4V4H9V3H15V4H20V6H19V19C19 19.55 18.8043 20.021 18.413 20.413C18.0217 20.805 17.5507 21.0007 17 21H7ZM17 6H7V19H17V6ZM9 17H11V8H9V17ZM13 17H15V8H13V17Z" fill="red" />
										</svg>

									</button>
								</div>
							}

						</div>
					</div>
				}
			}
		}
	</div>
	<div class="chat-input">
		<input type="text" placeholder="Введите сообщение..." @bind="newMessage" />
		<InputFile type="text" OnChange="HandleFileSelected" style="display: none;" class="form-control form-control-sm" id="photomessage" />
		<label class="attach-button" for="photomessage">
			<svg width="12" height="20" viewBox="0 0 12 20" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path d="M6 20C4.44908 20.0376 2.94653 19.4587 1.82179 18.3902C0.697047 17.3217 0.0419018 15.8508 0 14.3V4.12999C0.028834 3.0089 0.500645 1.94489 1.31216 1.17085C2.12368 0.396822 3.20879 -0.0241821 4.33 -6.6763e-06C5.45292 -0.0268679 6.54061 0.39294 7.3543 1.16726C8.16799 1.94158 8.64118 3.00713 8.67 4.12999V14.31C8.62841 14.9886 8.32954 15.6257 7.83432 16.0915C7.33911 16.5573 6.68486 16.8167 6.005 16.8167C5.32515 16.8167 4.6709 16.5573 4.17568 16.0915C3.68047 15.6257 3.38159 14.9886 3.34 14.31V4.91999C3.34 4.65478 3.44536 4.40042 3.63289 4.21289C3.82043 4.02535 4.07478 3.91999 4.34 3.91999C4.60522 3.91999 4.85957 4.02535 5.04711 4.21289C5.23464 4.40042 5.34 4.65478 5.34 4.91999V14.31C5.35994 14.4723 5.43857 14.6217 5.56106 14.7301C5.68356 14.8385 5.84145 14.8983 6.005 14.8983C6.16855 14.8983 6.32644 14.8385 6.44894 14.7301C6.57143 14.6217 6.65006 14.4723 6.67 14.31V4.12999C6.63891 3.5384 6.37577 2.98294 5.93768 2.58417C5.49958 2.18539 4.9219 1.97548 4.33 1.99999C3.73979 1.97817 3.16467 2.1893 2.72876 2.58779C2.29285 2.98629 2.0311 3.5402 2 4.12999V14.3C2.04163 15.3204 2.48597 16.2828 3.23569 16.9763C3.98541 17.6698 4.97942 18.0379 6 18C7.02058 18.0379 8.01459 17.6698 8.76431 16.9763C9.51403 16.2828 9.95837 15.3204 10 14.3V4.12999C10 3.86478 10.1054 3.61042 10.2929 3.42289C10.4804 3.23535 10.7348 3.12999 11 3.12999C11.2652 3.12999 11.5196 3.23535 11.7071 3.42289C11.8946 3.61042 12 3.86478 12 4.12999V14.3C11.9581 15.8508 11.303 17.3217 10.1782 18.3902C9.05347 19.4587 7.55092 20.0376 6 20Z" fill="white" />
			</svg>
		</label>
		<button class="send-button" @onclick="SendMessage">
			<svg width="19" height="16" viewBox="0 0 19 16" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path d="M0 16V10L8 8L0 6V0L19 8L0 16Z" fill="white" />
			</svg>
		</button>
	</div>
</div>
<div class="modal @(isEditMessageModalVisible ? "show" : "")" tabindex="-1" role="dialog" style="@(isEditMessageModalVisible ? "display: block;" : "display: none;")">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5>Изменить сообщение</h5>

				<button type="button" class="close" @onclick="CloseModal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<div class="d-flex flex-column align-items-center h-custom-2 px-5 ms-xl-4 pt-5 pt-xl-0 mt-xl-n5">
					<div class="form-outline mb-1">
						<label class="form-label" for="form2Example28">Текст сообщения</label>
						<InputText type="text" @bind-Value="@messageToEdit.message" class="form-control form-control-lg" />
					</div>
					<div class="pt-1 mb-4">
						<button class="btn btn-info btn-lg btn-block" @onclick="EditMessage" type="button">Изменить</button>
					</div>
				</div>
			</div>
			<div class="modal-footer mt-1" style="margin:10px;">
				<button type="button" class="btn btn-secondary" @onclick="CloseModal">Закрыть</button>
			</div>
		</div>
	</div>
</div>
<style>
	a {
		text-decoration: none;
		color: #333333;
	}

	/* Общий стиль контейнера */
	.chat-container {
		display: flex;
		flex-direction: column;
		height: 100vh;
		background-color: #f8f9fa;
		font-family: 'Arial', sans-serif;
		color: #333;
		border-radius: 7px;
	}
	/* Заголовок чата */
	.chat-header {
		background-color: #0d6efd;
		color: white;
		padding: 5px;
		text-align: center;
		font-size: 16px;
		border-bottom: 1px solid #ccc;
		border-radius: 7px;
	}

		.chat-header > h2 {
			font-size: 24px;
		}
	/* Область сообщений */
	.chat-messages {
		flex: 1;
		overflow-y: auto;
		padding: 15px;
		display: flex;
		flex-direction: column;
		gap: 10px;
		border-radius: 7px;
	}
	/* Сообщение */
	.message {
		max-width: 70%;
		padding: 10px;
		border-radius: 10px;
		display: flex;
		flex-direction: column;
		gap: 5px;
		min-width: 200px;
	}
	/* Сообщение от других пользователей */
	.other-message {
		align-self: flex-start;
		background-color: #e9ecef;
	}
	/* Сообщение от меня */
	.my-message {
		align-self: flex-end;
		background-color: #0d6efd;
		color: white;
	}
	/* Заголовок сообщения */
	.message-header {
		display: flex;
		align-items: center;
		gap: 10px;
	}
	/* Иконка пользователя */
	.avatar {
		width: 30px;
		height: 30px;
		border-radius: 50%;
		object-fit: cover;
	}
	/* Имя отправителя */
	.sender-name {
		font-weight: bold;
	}
	/* Содержимое сообщения */
	.message-content {
		word-wrap: break-word;
		display: flex;
		flex-direction: column;
		align-items: start;
		gap: 10px;
	}

	.content_image {
		width: 200px;
		aspect-ratio: 1;
		object-fit: cover;
	}
	/* Футер сообщения (дата) */
	.message-footer {
		display: flex;
		justify-content: flex-end; /* Прикрепляем дату к правому краю */
		margin-top: 5px; /* Отступ сверху */
		flex-direction: column;
		gap: 5px;
	}

	.admin_btns {
		display: flex;
	}
	/* Время отправки */
	.timestamp {
		font-size: 0.8rem;
		color: #6c757d; /* Цвет по умолчанию */
	}
	/* Цвет даты для моих сообщений */
	.my-message .timestamp {
		color: white; /* Белый цвет для моих сообщений */
	}
	/* Поле ввода сообщения */
	.chat-input {
		display: flex;
		align-items: center;
		gap: 10px;
		padding: 10px;
		background-color: white;
		border-top: 1px solid #ccc;
	}
		/* Поле ввода текста */
		.chat-input input {
			flex: 1;
			padding: 10px;
			border: 1px solid #ccc;
			border-radius: 5px;
			font-size: 1rem;
		}
	/* Кнопки прикрепления и отправки */
	.attach-button,
	.send-button {
		background-color: #0d6efd;
		color: white;
		border: none;
		padding: 10px;
		border-radius: 5px;
		cursor: pointer;
		transition: background-color 0.3s ease;
	}

		.attach-button:hover,
		.send-button:hover {
			background-color: #0b5ed7;
		}
	/* Иконки */
	.fas {
		font-size: 1.2rem;
	}
</style>