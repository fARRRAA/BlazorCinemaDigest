@rendermode InteractiveServer
@using BlazorCinemaDigest.ApiRequest
@using BlazorCinemaDigest.ApiRequest.Model

@code {
	[Parameter] public bool IsVisible { get; set; }
	[Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
	[Parameter]
	public List<User> parentUsers { get; set; }
	// [Parameter] public int userId { get; set; }
	[Parameter] public User user { get; set; }
	public User userOld = new User();
	[Inject] private UserApiService ApiRequest { get; set; }
	private List<User> users;
	private bool isModalVisible = false;
	string error;
	string success;


	private async void CloseModal()
	{
		var userData = await ApiRequest.GetAllUsersAsync();
		parentUsers = userData?.data?.users ?? parentUsers;
		IsVisible = false;
		IsVisibleChanged.InvokeAsync(IsVisible);	
	}
	protected override async Task OnInitializedAsync()
	{
		await getAllUsers();

	}
	private async Task getAllUsers()
	{
		var userData = await ApiRequest.GetAllUsersAsync();
		users = userData?.data?.users ?? new List<User>();

	}
	private async void EditUser()
	{
		var reqDataUser = new ReqDataUser()
			{
				name = user.name,
				email = user.email,
				password = user.password,
				login = user.login,
				description = user.description
			};

		if (users.Any(x => x.email == reqDataUser.email&& x.id!=user.id))
		{
			error = "такая почта уже есть";
			return;
		}
		await ApiRequest.EditUserAsync(user.id, reqDataUser);
		success = "отредактировано успешно";
		CloseModal();

	}
}

<div class="modal @(IsVisible ? "show" : "")" tabindex="-1" role="dialog" style="@(IsVisible ? "display: block;" : "display: none;")">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Редактирование юзера</h5>
				<button type="button" class="close" @onclick="CloseModal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<div class="d-flex align-items-center h-custom-2 px-5 ms-xl-4 mt-3 pt-3 pt-xl-0 mt-xl-n5">
					<form style="width: 23rem;">
						<div class="form-outline mb-4">
							<label class="form-label" for="form2Example28">Name</label>
							<input type="text" @bind="@user.name" id="form2Example28" class="form-control form-control-lg" />
						</div>
						<div class="form-outline mb-4">
							<label class="form-label" for="form2Example28">Email</label>
							<input type="text" @bind="@user.email" id="form2Example28" class="form-control form-control-lg" />
						</div>
						<div class="form-outline mb-4">
							<label class="form-label" for="form2Example28">Description</label>
							<input type="text" @bind="@user.description" id="form2Example28" class="form-control form-control-lg" />
						</div>
						<div class="form-outline mb-4">
							<label class="form-label" for="form2Example28">Login</label>
							<input type="text" @bind="@user.login" id="form2Example28" class="form-control form-control-lg" />
						</div>
						<div class="form-outline mb-4">
							<label class="form-label" for="form2Example28">Password</label>
							<input type="password" @bind="@user.password" id="form2Example28" class="form-control form-control-lg" />
						</div>
						<div class="pt-1 mb-4">
							<button class="btn btn-info btn-lg btn-block" @onclick="EditUser" type="button">Edit</button>
						</div>
					</form>
					@if (error != null)
					{
						<div class="alert alert-danger">@error</div>
					}

				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" @onclick="CloseModal">Закрыть</button>
			</div>
		</div>
	</div>
</div>